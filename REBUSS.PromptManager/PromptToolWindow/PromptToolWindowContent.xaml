<DataTemplate xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:vs="http://schemas.microsoft.com/visualstudio/extensibility/2022/xaml"
              xmlns:styles="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
              xmlns:colors="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
              xmlns:System="clr-namespace:System;assembly=mscorlib"
              xmlns:promptmanager="clr-namespace:REBUSS.PromptManager" 
              xmlns:model="clr-namespace:REBUSS.PromptManager.Core.Model;assembly=REBUSS.PromptManager.Core">
    <Grid Name="RootGrid">
        <Grid.InputBindings>
            <KeyBinding Key="Escape" Command="{Binding UnselectAllCommand}" />
        </Grid.InputBindings>
        <!--<vs:ExtensibilityUICommands.EventHandlers>
            <vs:EventHandlerCollection>
                <vs:EventHandler Event="MouseDown"
                 Command="{Binding UselectAllCommand}"
                 CommandParameter="{Binding}"
                 CounterTarget="{Binding RelativeSource={RelativeSource Self}}" />
            </vs:EventHandlerCollection>
        </vs:ExtensibilityUICommands.EventHandlers>-->
        <Grid.Resources>
            <Style TargetType="Label" BasedOn="{StaticResource {x:Static styles:VsResourceKeys.ThemedDialogLabelStyleKey}}" />
            <Style TargetType="TextBox" BasedOn="{StaticResource {x:Static styles:VsResourceKeys.TextBoxStyleKey}}" />
            <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Static styles:VsResourceKeys.ThemedDialogToggleButtonStyleKey}}"/>
            <Style TargetType="Button" BasedOn="{StaticResource {x:Static styles:VsResourceKeys.ButtonStyleKey}}" >
                <Setter Property="Margin" Value="5"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="Width" Value="20"/>
            </Style>
            
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static styles:VsBrushes.WindowTextKey}}" />
            </Style>
            <Style TargetType="TextBlock" x:Key="IconTextBlock">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static styles:VsBrushes.WindowTextKey}}" />
                <Setter Property="FontFamily" Value="Segoe Fluent Icons" />
                <Setter Property="FontSize" Value="16" />
            </Style>

            <Style x:Key="TreeViewItemFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="TreeViewItemSelectedBackground" Color="#FF007ACC" Opacity="0.3"/>
            <SolidColorBrush x:Key="TreeViewItemSelectedForeground" Color="White" Opacity="0.3"/>
            <SolidColorBrush x:Key="TreeViewItemInactiveBackground" Color="#FFAAE8FF" Opacity="0.3"/>
            <SolidColorBrush x:Key="TreeViewItemInactiveForeground" Color="Black" Opacity="0.3"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
            <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>

            <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="Width" Value="16"/>
                <Setter Property="Height" Value="16"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                                <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="RenderTransform" TargetName="ExpandPath">
                                        <Setter.Value>
                                            <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsChecked" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                                    <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="TreeViewItem" BasedOn="{StaticResource {x:Static styles:VsResourceKeys.ThemedDialogTreeViewItemStyleKey}}">
                <Setter Property="Margin" Value="5,0,5,5"/>
            </Style>
            <Style TargetType="TreeView" BasedOn="{StaticResource {x:Static styles:VsResourceKeys.ThemedDialogTreeViewStyleKey}}" />

            <Style x:Key="TreeViewItemStretchStyle" TargetType="{x:Type TreeViewItem}">
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MinWidth="19" Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                                <Border x:Name="Bd" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                    <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource TreeViewItemSelectedBackground}"/>
                                    <Setter Property="Foreground" Value="{StaticResource TreeViewItemSelectedForeground}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="IsSelectionActive" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource TreeViewItemInactiveBackground}"/>
                                    <Setter Property="Foreground" Value="{StaticResource TreeViewItemInactiveForeground}"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                        <Setter Property="ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <VirtualizingStackPanel/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="2*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <!-- TreeView for Groups and Prompts -->
        <TreeView x:Name="PromptTreeView" 
                  Grid.Row="0" 
                  Grid.Column="0" 
                  Margin="10"
                  AllowDrop="True"
                  ItemsSource="{Binding Nodes}"
                  ItemContainerStyle="{StaticResource TreeViewItemStretchStyle}" 
                  HorizontalContentAlignment="Stretch">
            <vs:ExtensibilityUICommands.EventHandlers>
                <vs:EventHandlerCollection>
                    <vs:EventHandler Event="SelectedItemChanged"
                             Command="{Binding SelectedItemChangedCommand}"
                             CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType=TreeView}}"
                             CounterTarget="{Binding RelativeSource={RelativeSource Self}}" />
                </vs:EventHandlerCollection>
            </vs:ExtensibilityUICommands.EventHandlers>
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Nodes}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Viewbox Width="16 " Height="16" Margin="5,5,5,0"
                                 VerticalAlignment="Center"
                                 Visibility="{Binding IsPrompt, Converter={StaticResource BoolToVisibilityConverter}}">
                            <Rectangle Width="16 " Height="16">
                                <Rectangle.Resources>
                                    <SolidColorBrush x:Key="canvas" Opacity="0" />
                                    <SolidColorBrush x:Key="light-defaultgrey-10" Color="#005dba" Opacity="0.1" />
                                    <SolidColorBrush x:Key="light-defaultgrey" Color="#005dba" Opacity="1" />
                                    <System:Double x:Key="cls-1">0.75</System:Double>
                                </Rectangle.Resources>
                                <Rectangle.Fill>
                                    <DrawingBrush Stretch="None">
                                        <DrawingBrush.Drawing>
                                            <DrawingGroup>
                                                <DrawingGroup x:Name="canvas">
                                                    <GeometryDrawing Brush="{DynamicResource canvas}" Geometry="F1M16,16H0V0H16Z" />
                                                    <GeometryDrawing Brush="{DynamicResource canvas}" Geometry="F1M16,16H0V0H16Z" />
                                                </DrawingGroup>
                                                <DrawingGroup x:Name="level_1">
                                                    <DrawingGroup Opacity="{DynamicResource cls-1}">
                                                        <GeometryDrawing Brush="{DynamicResource light-defaultgrey-10}" Geometry="F1M13.5,4.5v10H2.5V1.5h8Z" />
                                                        <GeometryDrawing Brush="{DynamicResource light-defaultgrey}" Geometry="F1M13.854,4.146l-3-3L10.5,1h-8L2,1.5v13l.5.5h11l.5-.5V4.5ZM3,14V2h7V5h3v9Z" />
                                                    </DrawingGroup>
                                                    <GeometryDrawing Brush="{DynamicResource light-defaultgrey}" Geometry="F1M12,9H4V8h8Zm0,2H4v1h8ZM9,5H4V6H9Z" />
                                                </DrawingGroup>
                                            </DrawingGroup>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Viewbox>
                        <Viewbox Width="16 " Height="16" Margin="5,5,5,0"
                                 VerticalAlignment="Center"
                                 Visibility="{Binding IsGroup, Converter={StaticResource BoolToVisibilityConverter}}">
                            <Rectangle Width="16 " Height="16">
                                <Rectangle.Resources>
                                    <SolidColorBrush x:Key="canvas" Opacity="0" />
                                    <SolidColorBrush x:Key="light-yellow-10" Color="#996f00" Opacity="0.1" />
                                    <SolidColorBrush x:Key="light-yellow" Color="#996f00" Opacity="1" />
                                </Rectangle.Resources>
                                <Rectangle.Fill>
                                    <DrawingBrush Stretch="None">
                                        <DrawingBrush.Drawing>
                                            <DrawingGroup>
                                                <DrawingGroup x:Name="canvas">
                                                    <GeometryDrawing Brush="{DynamicResource canvas}" Geometry="F1M16,16H0V0H16Z" />
                                                </DrawingGroup>
                                                <DrawingGroup x:Name="level_1">
                                                    <GeometryDrawing Brush="{DynamicResource light-yellow-10}" Geometry="F1M14.5,3.5v9H1.5V2.5h6l1,1Z" />
                                                    <GeometryDrawing Brush="{DynamicResource light-yellow}" Geometry="F1M14.5,3H8.707l-.853-.854L7.5,2h-6L1,2.5v10l.5.5h13l.5-.5v-9ZM7.293,3l.488.488L7.268,4H2V3ZM14,12H2V5H7.475l.354-.146L8.682,4H14Z" />
                                                </DrawingGroup>
                                            </DrawingGroup>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Viewbox>
                        <TextBlock Grid.Column="1" VerticalAlignment="Center" Text="{Binding Name}" MinWidth="100">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <TextBox Grid.Column="1" VerticalAlignment="Center" Text="{Binding Name, Mode=TwoWay}" MinWidth="100">
                            <TextBox.Style>
                                <Style TargetType="TextBox">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsSelected}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBox.Style>
                        </TextBox>
                    </Grid>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>

        <!-- Buttons for managing prompts and groups -->
        <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Vertical" Margin="0,5,10,0"
                    Grid.RowSpan="3">
            <Button ToolTip="Save Prompts" Command="{Binding SavePromptsCommand}">
                <TextBlock Text="&#xE74E;" Style="{StaticResource IconTextBlock}"/>
            </Button>
            <Button ToolTip="Add Prompt" Command="{Binding AddPromptCommand}">
                <TextBlock Text="&#xED0E;" Style="{StaticResource IconTextBlock}"/>
            </Button>
            <Button ToolTip="Add Group" Command="{Binding CreateGroupCommand}">
                <TextBlock Text="&#xE8F4;" Style="{StaticResource IconTextBlock}"/>
            </Button>
            <Button ToolTip="Remove Selected Prompts" Command="{Binding RemoveSelectedPromptsCommand}">
                <TextBlock Text="&#xE74D;" Style="{StaticResource IconTextBlock}"/>
            </Button>
        </StackPanel>
        <Button ToolTip="Copy Prompt" 
                Grid.Column="1" 
                Grid.Row="2" 
                MaxWidth="30"
                VerticalAlignment="Bottom"
                Margin="0,0,10,10"
                Command="{Binding CopyPromptCommand}">
            <TextBlock Text="&#xE8C8;" 
                       Style="{StaticResource IconTextBlock}"/>
        </Button>
        <!-- Edit area for selected prompt -->
        <TextBlock Text="Edit Prompt" Margin="10,0" 
                   Grid.Row="1"/>
        <TextBox Name="PromptEditor" Margin="10" 
                 Grid.Row="2"/>
    </Grid>
</DataTemplate>
